import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.navie_bayes import multinomialNB
from sklearn.metrics import accurocy_score,confusion_matrix,precision_score,recall_score
msglbl_data=pd.read_cvs('statement_data.cvs',names=['message,''label'])
print("the total instances in the dataset:",msglbl_data.shape[0])
msglbl_data['labelum']=msglbl_data.label.map({'pos':1,'neg':0})
x=msglbl_data["message"]
y=msglbl_data.labelnum
xtarin,xtest,ytrain,ytest=train_test_split(x,y)
count_veck=CountVectorizer()
xtrain_dims=count_vect.fit_transform(xtrain)
xtest_dims=count_vect.transform(xtest)
df=pd.dataframe(xtrain_dims.to array(),columns=count.vect.set_feature_names_out())
cif=multinomialNB()
cif.fit(xtrain_dims,ytrain)
prediction=cif.predict(xtest_dims)
print('********Accuracy matrics*********')
print('Accuracy:',accuracy_score(ytest,prediction))
print('Recall:',recall_score(ytest,prediction))
print('precision:',precision_score(ytest,prediction))
print('confusion matrix :\n',confusion_matrix(ytest,prediction))
print(10*"-")
test_stmt=[input("Enter any statement to predivt:")]
test_dims=count_vect.transform(test-stmt)
pred=cif.predict(test_dims)
for stmt.lbl in zip(test_stmt,pred):
    if lbl==1:
        print("statement is positive")
    else:
        print("statement is negative")
