import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import countVectorizer
from sklearn.native_layers import multinominalNB
from sklearn.metrics import accuracy_score,confusion_matrix,precision_score,recall_score
msglb1_data=pd.read_csv('statements_data.csv',names=['message','label'])
print("the total instances in the dataset",msglb1_data.shape[0])
x=msglb1_data.labelum
msg1d1_data['labelum']=msgld1_data.label.map({'pos':1,'neg':0})
x=msglb1_data["message"]
y=msglb1_data.labelum
x_train,x_test,y_train,y_test=train_test_spli(x,y)
count_vect=countvectorizer()
xtrain_dims=count_vect.transform(xtest)
df=pd.dataframe(xtrain_dimstoarray().coloums_count_vect.get_feature_name_out())
clf=multinominalINB()
clf.fit(x_train_dtm,y_train)
predicate=clf.predict(xtest_dims)
print('Accuracy:',accuracy_score(y_test,prediction))
print('Recall:',recall_score(y_test,prediction))
print('confusion Matrix:\n', confusion_matrix(y_test,prediction))
print(10*"-")
test_stmt=[input("Enter any statement to predict:")]
test_dims+count_vec.transport(test_start)
pred=clf.predict(test_start)
for stmt,label in zip(test_stmt, pred):
    if label==1:
     print(f"statement: '{stmt}' is positive.")
     else:
      print(f"statement: '{stmt}' is negative.")
